// Generated by CoffeeScript 1.6.3
var Reporter,
  __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

Reporter = (function() {
  function Reporter() {
    this.addReporter = __bind(this.addReporter, this);
    this.createReport = __bind(this.createReport, this);
    this.addTest = __bind(this.addTest, this);
    this.reporters = [];
    this.type = "Container";
    this.tests = [];
    this.stats = {
      tests: 0,
      failures: 0,
      passes: 0,
      timestamp: (new Date).toUTCString(),
      duration: 0
    };
  }

  Reporter.prototype.addTest = function(test, callback) {
    var reporter, _i, _len, _ref;
    _ref = this.reporters;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      reporter = _ref[_i];
      reporter.addTest(test, function(error) {
        if (error) {
          return callback(error);
        }
      });
    }
    this.tests.push(test);
    this.stats.tests += 1;
    switch (test.status) {
      case 'pass':
        this.stats.passes += 1;
        break;
      case 'fail':
        this.stats.failures += 1;
        break;
      default:
        return callback(new Error("Error adding test: must have status of pass or fail."));
    }
    return callback();
  };

  Reporter.prototype.createReport = function(callback) {
    var reporter, _i, _len, _ref;
    _ref = this.reporters;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      reporter = _ref[_i];
      reporter.createReport(function(error) {
        if (error) {
          return callback(error);
        }
      });
    }
    return callback();
  };

  Reporter.prototype.addReporter = function(reporter) {
    this.reporters.push(reporter);
    return this;
  };

  return Reporter;

})();

module.exports = Reporter;
