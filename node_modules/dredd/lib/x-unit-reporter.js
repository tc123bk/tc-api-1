// Generated by CoffeeScript 1.6.3
var Reporter, XUnitReporter, cli, fs, htmlencode,
  __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

fs = require('fs');

cli = require('cli');

Reporter = require('./reporter');

htmlencode = require('htmlencode');

XUnitReporter = (function(_super) {
  var appendLine, cdata, doTest, toTag;

  __extends(XUnitReporter, _super);

  function XUnitReporter(path) {
    this.createReport = __bind(this.createReport, this);
    this.addTest = __bind(this.addTest, this);
    XUnitReporter.__super__.constructor.call(this);
    this.type = "xUnit";
    if (path == null) {
      this.path = process.cwd() + "/report.xml";
    }
    if (fs.existsSync(this.path)) {
      fs.unlinkSync(this.path);
    }
  }

  XUnitReporter.prototype.addTest = function(test, callback) {
    XUnitReporter.__super__.addTest.call(this, test, function(error) {
      if (error) {
        return callback(error);
      }
    });
    cli.debug("Adding test to junit reporter: " + JSON.stringify(test));
    return callback();
  };

  XUnitReporter.prototype.createReport = function(callback) {
    var test, _i, _len, _ref;
    XUnitReporter.__super__.createReport.call(this, function(error) {
      if (error) {
        return callback(error);
      }
    });
    cli.debug("Writing junit tests to file: " + this.path);
    appendLine(this.path, toTag('testsuite', {
      name: 'Dredd Tests',
      tests: this.stats.tests,
      failures: this.stats.failures,
      errors: this.stats.failures,
      skip: this.stats.tests - this.stats.failures - this.stats.passes,
      timestamp: (new Date).toUTCString(),
      time: this.stats.duration / 1000
    }, false));
    _ref = this.tests;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      test = _ref[_i];
      doTest(this.path, test);
    }
    appendLine(this.path, '</testsuite>');
    return callback();
  };

  doTest = function(path, test) {
    var attrs, diff;
    attrs = {
      name: htmlencode.htmlEncode(test.title),
      time: 0
    };
    if ('fail' === test.status) {
      diff = "Message: \n" + test.message + "\nExpected: \n" + (JSON.stringify(test.expected, null, 4)) + "\nActual:\n" + (JSON.stringify(test.actual, null, 4));
      return appendLine(path, toTag('testcase', attrs, false, toTag('failure', null, false, cdata(diff))));
    } else {
      return appendLine(path, toTag('testcase', attrs, true));
    }
  };

  cdata = function(str) {
    return '<![CDATA[' + str + ']]>';
  };

  appendLine = function(path, line) {
    return fs.appendFileSync(path, line + "\n");
  };

  toTag = function(name, attrs, close, content) {
    var end, key, pairs, tag;
    end = (close ? "/>" : ">");
    pairs = [];
    tag = void 0;
    for (key in attrs) {
      pairs.push(key + "=\"" + attrs[key] + "\"");
    }
    tag = "<" + name + (pairs.length ? " " + pairs.join(" ") : "") + end;
    if (content) {
      tag += content + "</" + name + end;
    }
    return tag;
  };

  return XUnitReporter;

})(Reporter);

module.exports = XUnitReporter;
