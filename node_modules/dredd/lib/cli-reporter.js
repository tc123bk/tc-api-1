// Generated by CoffeeScript 1.6.3
var CliReporter, Reporter, logger,
  __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

logger = require('./logger');

Reporter = require('./reporter');

CliReporter = (function(_super) {
  __extends(CliReporter, _super);

  function CliReporter(path) {
    this.createReport = __bind(this.createReport, this);
    this.addTest = __bind(this.addTest, this);
    CliReporter.__super__.constructor.call(this);
    this.type = "cli";
  }

  CliReporter.prototype.addTest = function(test, callback) {
    CliReporter.__super__.addTest.call(this, test, function(error) {
      if (error) {
        return callback(error);
      }
    });
    switch (test.status) {
      case 'pass':
        logger.pass(test.title);
        break;
      case 'fail':
        logger.fail(test.title);
        logger.fail(test.message);
        logger.request("\n" + (JSON.stringify(test.request, null, 4)) + "\n");
        logger.expected("\n" + (JSON.stringify(test.expected, null, 4)) + "\n");
        logger.actual("\n" + (JSON.stringify(test.actual, null, 4)) + "\n\n");
    }
    return callback();
  };

  CliReporter.prototype.createReport = function(callback) {
    CliReporter.__super__.createReport.call(this, function(error) {
      if (error) {
        return callback(error);
      }
    });
    if (this.stats.tests > 0) {
      logger.complete("" + this.stats.passes + " passing, " + this.stats.failures + " failing, " + (this.stats.tests - this.stats.failures - this.stats.passes) + " skipped");
    }
    return callback();
  };

  return CliReporter;

})(Reporter);

module.exports = CliReporter;
