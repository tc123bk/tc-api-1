// Generated by CoffeeScript 1.6.3
var Dredd, async, blueprintAstToRuntime, cli, configureReporters, executeTransaction, fs, options, protagonist,
  __hasProp = {}.hasOwnProperty;

async = require('async');

fs = require('fs');

protagonist = require('protagonist');

cli = require('cli');

executeTransaction = require('./execute-transaction');

blueprintAstToRuntime = require('./blueprint-ast-to-runtime');

configureReporters = require('./configure-reporters');

options = {
  'dry-run': ['d', 'Run without performing tests.'],
  silent: ['s', 'Suppress all command line output'],
  reporter: ['r', 'Output additional report format. Options: junit', 'string'],
  output: ['o', 'Specifies output file when using additional reporter', 'file'],
  debug: [null, 'Display debug information']
};

Dredd = (function() {
  var configuredTransactions, handleRuntimeProblems;

  function Dredd(config) {
    var key, value;
    this.configuration = {
      blueprintPath: null,
      server: null,
      reporter: null,
      request: null,
      options: {
        'dry-run': false,
        silent: false,
        reporter: null,
        output: null,
        debug: false
      }
    };
    for (key in config) {
      if (!__hasProp.call(config, key)) continue;
      value = config[key];
      this.configuration[key] = value;
    }
    configureReporters(this.configuration);
  }

  Dredd.prototype.run = function(callback) {
    var config;
    config = this.configuration;
    return fs.readFile(config.blueprintPath, 'utf8', function(parseError, data) {
      if (parseError) {
        return callback(parseError, config.reporter);
      }
      return protagonist.parse(data, function(protagonistError, result) {
        var runtime, runtimeError;
        if (protagonistError) {
          return callback(protagonistError, config.reporter);
        }
        runtime = blueprintAstToRuntime(result['ast']);
        runtimeError = handleRuntimeProblems(runtime);
        if (runtimeError) {
          return callback(runtimeError, config.reporter);
        }
        return async.eachSeries(configuredTransactions(runtime, config), executeTransaction, function(error) {
          if (error) {
            return callback(error, config.reporter);
          }
          return config.reporter.createReport(function(reporterError) {
            return callback(reporterError, config.reporter);
          });
        });
      });
    });
  };

  handleRuntimeProblems = function(runtime) {
    var error, message, origin, warning, _i, _j, _len, _len1, _ref, _ref1;
    if (runtime['warnings'].length > 0) {
      _ref = runtime['warnings'];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        warning = _ref[_i];
        message = warning['message'];
        origin = warning['origin'];
        cli.info("Runtime compilation warning: " + warning['message'] + "\n on " + origin['resourceGroupName'] + ' > ' + origin['resourceName'] + ' > ' + origin['actionName']);
      }
    }
    if (runtime['errors'].length > 0) {
      _ref1 = runtime['errors'];
      for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
        error = _ref1[_j];
        message = error['message'];
        origin = error['origin'];
        cli.error("Runtime compilation error: " + error['message'] + "\n on " + origin['resourceGroupName'] + ' > ' + origin['resourceName'] + ' > ' + origin['actionName']);
      }
      return new Error("Error parsing ast to blueprint.");
    }
  };

  configuredTransactions = function(runtime, config) {
    var transaction, transactionsWithConfiguration, _i, _len, _ref;
    transactionsWithConfiguration = [];
    _ref = runtime['transactions'];
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      transaction = _ref[_i];
      transaction['configuration'] = config;
      transactionsWithConfiguration.push(transaction);
    }
    return transactionsWithConfiguration;
  };

  return Dredd;

})();

module.exports = Dredd;

module.exports.options = options;
