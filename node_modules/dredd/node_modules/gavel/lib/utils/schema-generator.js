// Generated by CoffeeScript 1.6.3
var SCHEMA_VERSION, SchemaGenerator, SchemaProperties;

SCHEMA_VERSION = "http://json-schema.org/draft-03/schema";

SchemaProperties = (function() {
  function SchemaProperties(_arg) {
    var keysStrict, typesStrict, valuesStrict;
    keysStrict = _arg.keysStrict, valuesStrict = _arg.valuesStrict, typesStrict = _arg.typesStrict;
    this.set({
      keysStrict: keysStrict || false,
      valuesStrict: valuesStrict || false,
      typesStrict: typesStrict || false
    });
  }

  SchemaProperties.prototype.set = function(_arg) {
    var keysStrict, typesStrict, valuesStrict;
    keysStrict = _arg.keysStrict, valuesStrict = _arg.valuesStrict, typesStrict = _arg.typesStrict;
    this.keysStrict = keysStrict;
    this.valuesStrict = valuesStrict;
    return this.typesStrict = typesStrict;
  };

  return SchemaProperties;

})();

SchemaGenerator = (function() {
  function SchemaGenerator(_arg) {
    var json, properties;
    json = _arg.json, properties = _arg.properties;
    if (typeof json === 'string') {
      this.json = JSON.parse(json);
    } else {
      this.json = json;
    }
    this.schema = void 0;
    this.properties = properties || new SchemaProperties({});
  }

  SchemaGenerator.prototype.generate = function() {
    var getSchemaForObjectProperties;
    getSchemaForObjectProperties = {
      baseObject: this.json,
      objectId: void 0,
      firstLevel: true,
      properties: this.properties
    };
    return this.schema = this.getSchemaForObject(getSchemaForObjectProperties);
  };

  SchemaGenerator.prototype.getSchemaTypeFor = function(val) {
    var type;
    if (this.isArray(val)) {
      return 'array';
    }
    type = typeof val;
    if ((type === 'undefined') || (val == null)) {
      return 'null';
    }
    if (type === 'number' && val % 1 === 0) {
      return 'integer';
    }
    return type;
  };

  SchemaGenerator.prototype.isBaseType = function(type) {
    return !(type === "array" || type === "object");
  };

  SchemaGenerator.prototype.getSchemaForObject = function(_arg) {
    var baseObject, counter, firstLevel, getSchemaForObjectProperties, item, objectId, prop, properties, schemaDict, schemaType, value, _i, _len;
    baseObject = _arg.baseObject, objectId = _arg.objectId, firstLevel = _arg.firstLevel, properties = _arg.properties;
    if (firstLevel === void 0) {
      firstLevel = true;
    }
    properties || (properties = new SchemaProperties);
    schemaDict = {};
    if (firstLevel) {
      schemaDict["$schema"] = SCHEMA_VERSION;
      schemaDict["id"] = "#";
      if ((baseObject instanceof Object) && Object.keys(baseObject).length === 0) {
        schemaDict["empty"] = true;
      }
    }
    if (objectId !== void 0) {
      schemaDict["id"] = objectId;
    }
    schemaType = this.getSchemaTypeFor(baseObject);
    schemaDict["required"] = true;
    if (schemaType === 'object') {
      if (properties.keysStrict) {
        schemaDict['additionalProperties'] = false;
      } else {
        schemaDict['additionalProperties'] = true;
      }
    }
    if (schemaType === 'array') {
      if (properties.keysStrict) {
        schemaDict['additionalItems'] = false;
      } else {
        schemaDict['additionalItems'] = true;
      }
    }
    if (properties.valuesStrict && this.isBaseType(schemaType)) {
      schemaDict['enum'] = [baseObject];
    }
    if ((properties.typesStrict && this.isBaseType(schemaType)) || !this.isBaseType(schemaType)) {
      schemaDict["type"] = schemaType;
    }
    if (schemaType === 'object' && Object.keys(baseObject).length > 0) {
      schemaDict["properties"] = {};
      for (prop in baseObject) {
        value = baseObject[prop];
        getSchemaForObjectProperties = {
          baseObject: value,
          objectId: prop,
          firstLevel: false,
          properties: properties
        };
        schemaDict["properties"][prop] = this.getSchemaForObject(getSchemaForObjectProperties);
      }
    } else if (schemaType === 'array' && baseObject.length > 0) {
      schemaDict['items'] = [];
      counter = 0;
      for (_i = 0, _len = baseObject.length; _i < _len; _i++) {
        item = baseObject[_i];
        getSchemaForObjectProperties = {
          baseObject: item,
          objectId: counter,
          firstLevel: false,
          properties: properties
        };
        schemaDict['items'].push(this.getSchemaForObject(getSchemaForObjectProperties));
        counter += 1;
      }
    }
    return schemaDict;
  };

  SchemaGenerator.prototype.isArray = function(object) {
    return object instanceof Array;
  };

  return SchemaGenerator;

})();

module.exports = {
  SchemaProperties: SchemaProperties,
  SchemaGenerator: SchemaGenerator
};
