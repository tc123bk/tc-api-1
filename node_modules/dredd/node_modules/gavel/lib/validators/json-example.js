// Generated by CoffeeScript 1.6.3
var JsonExample, JsonSchema, SchemaGenerator, SchemaProperties, errors, jsonPointer, _ref;

errors = require('../errors');

JsonSchema = require('./json-schema').JsonSchema;

jsonPointer = require('json-pointer');

_ref = require('../utils/schema-generator'), SchemaGenerator = _ref.SchemaGenerator, SchemaProperties = _ref.SchemaProperties;

JsonExample = (function() {
  function JsonExample(real, expected) {
    var error, outError, validatorType;
    this.real = real;
    this.expected = expected;
    if (typeof this.real !== 'string') {
      outError = new errors.MalformedDataError('JsonExample validator: provided real data is not string');
      outError['data'] = this.real;
      throw outError;
    }
    if (typeof this.expected !== 'string') {
      outError = new errors.MalformedDataError('JsonExample validator: provided expected data is not string');
      outError['data'] = this.expected;
      throw outError;
    }
    this.expected = JSON.parse(this.expected);
    this.schema = this.getSchema(this.expected);
    try {
      this.real = JSON.parse(real);
    } catch (_error) {
      error = _error;
      validatorType = 'string';
    }
    this.validator = new JsonSchema(this.real, this.schema);
  }

  JsonExample.prototype.validate = function() {
    return this.validator.validate();
  };

  JsonExample.evaluateOutputToResults = function(data) {
    var indexes, results, _i, _ref1, _results;
    results = [];
    if (data === null) {
      return results;
    }
    if (data.length > 0) {
      indexes = (function() {
        _results = [];
        for (var _i = 0, _ref1 = data.length - 1; 0 <= _ref1 ? _i <= _ref1 : _i >= _ref1; 0 <= _ref1 ? _i++ : _i--){ _results.push(_i); }
        return _results;
      }).apply(this);
      indexes.forEach(function(index) {
        var item, message;
        item = data[index];
        console.error;
        message = {
          pointer: jsonPointer.compile(item['property']),
          severity: 'error',
          message: item.message
        };
        return results.push(message);
      });
    }
    return results;
  };

  JsonExample.prototype.getSchema = function(data) {
    var properties, schemaGenerator;
    properties = new SchemaProperties({});
    properties.set({
      keysStrict: false,
      valuesStrict: false,
      typesStrict: false
    });
    schemaGenerator = new SchemaGenerator({
      json: data,
      properties: properties
    });
    return schemaGenerator.generate();
  };

  return JsonExample;

})();

module.exports = {
  JsonExample: JsonExample
};
